/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal BOOL, ELSE, IF, INT, RETURN, VOID, WHILE, SEMI;          //keywords
terminal ADD, SUB, MULT, DIV, LT, LTE, GT, GTE, EQ, NEQ, NOT, OR, AND, ASSIGN, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE, COMMA; // special symbols

terminal String ID;
terminal Integer NUM; 
terminal Boolean TRUTH;

non terminal DecList program, declaration_list;           // list of declarations
non terminal ExpList statement_list, args, arg_list;      // list of expressions
non terminal VarDecList params, param_list, local_declarations;   // list of variable declarations (function args and params)

non terminal VarDec var_declaration, param;
non terminal Dec declaration, fun_declaration, fun_prototype;                                // generic 
non terminal Exp expression, statement;                                                      // generic expresisions
non terminal Exp compound_stmt, expression_stmt, selection_stmt, iteration_stmt, call, return_stmt;  // statements
non terminal Exp obool_expression, abool_expression, ubool_expression;                       // expressions but w/ logic
non terminal Exp simple_expression, additive_expression, term, signed_factor, factor;  // expressions but w/ math

non terminal VarExp var;
non terminal NameTy type_specifier;                 // NameTy
non terminal Integer relop, addop, mulop;           // only has terminals inside it

precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc LTE, LT, GT, GTE, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence right UMINUS;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

program              ::= declaration_list:d
                        {: RESULT = d; :}
                        ;

declaration_list     ::= declaration_list:d1 declaration:d2
                        {: DecList l = d1;
                           while (l.tail != null)
                              l = l.tail;
                           l.tail = new DecList(d2, null); 
                           RESULT = d1;
                        :}
                        | declaration:d
                        {: RESULT = new DecList(d, null); :}
                        ;

declaration          ::= var_declaration:v
                        {: RESULT = v; :}
                        | fun_declaration:f
                        {: RESULT = f; :}
                        | fun_prototype:f
                        {: RESULT = f; :}
                        ;

var_declaration      ::= type_specifier:t ID:i SEMI
                        {: RESULT = new SimpleDec(t.row, t.column, t, i); :}
                        | type_specifier:t ID:i LBRACKET NUM:n RBRACKET SEMI
                        {: RESULT = new ArrayDec(t.row, t.column, t, i, n); :}
                        ;

type_specifier       ::= BOOL:b
                        {: RESULT = new NameTy(bleft, bright, NameTy.BOOL); :}
                        | INT:i
                        {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
                        | VOID:v
                        {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
                        ;

fun_declaration      ::= type_specifier:t ID:i LPAREN params:p RPAREN compound_stmt:c
                        {: RESULT = new FunctionDec(t.row, t.column, t, i, p, c); :}
                        ;

fun_prototype        ::= type_specifier:t ID:i LPAREN params:p RPAREN SEMI
                        {: RESULT = new FunctionDec(t.row, t.column, t, i, p, new NilExp(t.row, t.column)); :}
                        ;

params               ::= param_list:p
                        {: RESULT = p; :}
                        | VOID
                        {: RESULT = new VarDecList(null, null); :}
                        ;

param_list           ::= param_list:pl COMMA param:p
                        {: VarDecList lisd = pl;
                           while (lisd.tail != null)
                              lisd = lisd.tail;
                           lisd.tail = new VarDecList(p, null);
                           RESULT = pl;
                        :}
                        | param:p
                        {: RESULT = new VarDecList(p, null); :}
                        ;

param                ::= type_specifier:t ID:i
                        {: RESULT = new SimpleDec(t.row, t.column, t, i); :}
                        | type_specifier:t ID:i LBRACKET RBRACKET
                        {: RESULT = new ArrayDec(t.row, t.column, t, i, 0); :}
                        ;

compound_stmt        ::= LBRACE:lb local_declarations:l statement_list:s RBRACE
                        {: RESULT = new CompoundExp(lbleft, lbright, l, s); :}
                        ;

local_declarations   ::= local_declarations:l var_declaration:v
                        {: VarDecList list = l;
                           if (list.head == null){
                              list.head = v;
                           } else {
                              while (list.tail != null) 
                                 list = list.tail;
                              list.tail = new VarDecList(v, null);
                           }
                           RESULT = l;
                        :}
                        |
                        {: RESULT = new VarDecList(null, null); :}
                        ;

statement_list       ::= statement_list:l statement:s 
                        {: ExpList list = l;
                           if (list.head == null){
                              list.head = s;
                           } else {
                              while (list.tail != null) 
                                 list = list.tail;
                              list.tail = new ExpList(s, null);
                           }
                           RESULT = l;
                        :}
                        |
                        {: RESULT = new ExpList(null, null); :}
                        ;

statement            ::= expression_stmt:e
                        {: RESULT = e; :}
                        | compound_stmt:c
                        {: RESULT = c; :}
                        | selection_stmt:s
                        {: RESULT = s; :}
                        | iteration_stmt:i
                        {: RESULT = i; :}
                        | return_stmt:r
                        {: RESULT = r; :}
                        ;

expression_stmt      ::= expression:e SEMI
                        {: RESULT = e; :}
                        | SEMI:s
                        {: RESULT = new NilExp(sleft, sright); :}
                        ;

selection_stmt       ::= IF:i LPAREN expression:e RPAREN statement:s
                        {: RESULT = new IfExp(ileft, iright, e, s, new NilExp(ileft, iright)); :}
                        | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                        {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
                        ;

iteration_stmt       ::= WHILE:w LPAREN expression:e RPAREN statement:s
                        {: RESULT = new WhileExp(wleft, wright, e, s); :}
                        ;

return_stmt          ::= RETURN:r expression:e SEMI 
                        {: RESULT = new ReturnExp(rleft, rright, e); :}
                        | RETURN:r SEMI
                        {: RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright)); :}
                        ;

expression           ::= var:v ASSIGN expression:e
                        {: RESULT = new AssignExp(v.row, v.column, v, e); :}
                        | obool_expression:o
                        {: RESULT = o; :}
                        ;

var                  ::= ID:i
                        {: RESULT = new VarExp(ileft, iright, new SimpleVar(ileft, iright, i)); :}
                        | ID:i LBRACKET expression:e RBRACKET
                        {: RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, e)); :}
                        ;

obool_expression     ::= obool_expression:o OR abool_expression:a
                        {: RESULT = new OpExp(o.row, o.column, o, OpExp.OR, a); :}
                        | abool_expression:a
                        {: RESULT = a; :}
                        ;

abool_expression     ::= abool_expression:a AND ubool_expression:u
                        {: RESULT = new OpExp(a.row, a.column, a, OpExp.AND, u); :}
                        | ubool_expression:u
                        {: RESULT = u; :}
                        ;

ubool_expression     ::= NOT:n ubool_expression:u 
                        {: RESULT = new OpExp(nleft, nright, new NilExp(nleft, nright), OpExp.NOT, u); :}
                        | simple_expression:s
                        {: RESULT = s; :}
                        ;

simple_expression    ::= additive_expression:a1 relop:r additive_expression:a2
                        {: RESULT = new OpExp(a1.row, a1.column, a1, r, a2); :}
                        | additive_expression:a
                        {: RESULT = a; :}
                        ;

relop                ::= LTE
                        {: RESULT = OpExp.LTE; :}
                        | LT
                        {: RESULT = OpExp.LT; :}
                        | GT
                        {: RESULT = OpExp.GT; :}
                        | GTE
                        {: RESULT = OpExp.GTE; :}
                        | EQ
                        {: RESULT = OpExp.EQ; :}
                        | NEQ
                        {: RESULT = OpExp.NEQ; :}
                        ;

additive_expression  ::= additive_expression:a addop:op term:t
                        {: RESULT = new OpExp(a.row, a.column, a, op, t); :}
                        | term:t
                        {: RESULT = t; :}
                        ;

addop                ::= ADD
                        {: RESULT = OpExp.PLUS; :}
                        | SUB
                        {: RESULT = OpExp.MINUS; :}
                        ;

term                 ::= term:t mulop:m signed_factor:s
                        {: RESULT = new OpExp(t.row, t.column, t, m, s); :}
                        | signed_factor:s
                        {: RESULT = s; :}
                        ;

mulop                ::= MULT
                        {: RESULT = OpExp.TIMES; :}
                        | DIV
                        {: RESULT = OpExp.DIV; :}
                        ;

signed_factor        ::= SUB:s signed_factor:sf
                        {: RESULT = new OpExp(sleft, sright, new NilExp(sleft, sright), OpExp.UMINUS, sf); :}
                        | factor:f
                        {: RESULT = f; :}
                        ;

factor               ::= LPAREN:l expression:e RPAREN 
                        {: 
                           e.row = lleft;
                           e.column = lright;
                           RESULT = e; 
                        :}
                        | var:v
                        {: RESULT = v; :}
                        | call:c
                        {: RESULT = c; :}
                        | NUM:n
                        {: RESULT = new IntExp(nleft, nright, n); :}
                        | TRUTH:t
                        {: RESULT = new BoolExp(tleft, tright, t); :}
                        ;

call                 ::= ID:i LPAREN:l args:a RPAREN
                        {: if (a.head instanceof NilExp){
                              a.head.row = lleft;
                              a.head.column = lright;
                        } 
                           RESULT = new CallExp(ileft, iright, i, a); 
                        :}
                        ;

args                 ::= arg_list:a
                        {: RESULT = a; :}
                        | 
                        {: RESULT = new ExpList(new NilExp(-1, -1), null); :}
                        ;

arg_list             ::= arg_list:a COMMA expression:e
                        {: ExpList list = a;
                           while (list.tail != null)
                              list = list.tail;
                           list.tail = new ExpList(e, null);
                           RESULT = a;
                        :}
                        | expression:e
                        {: RESULT = new ExpList(e, null); :}
                        ;