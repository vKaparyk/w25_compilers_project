/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
import java_cup.runtime.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */

   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void log_object(Object info){
      // System.err.println(info);
      if (info instanceof Absyn) {
         AbsynVisitor visitor = new ShowTreeVisitor();
         ((Absyn)info).accept(visitor, 0, false); 
      }
      // if (info instanceof java_cup.runtime.Symbol) {
    }

      // }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal BOOL, ELSE, IF, INT, RETURN, VOID, WHILE, SEMI;          //keywords
terminal ADD, SUB, UMINUS, MULT, DIV, LT, LTE, GT, GTE, EQ, NEQ, NOT, OR, AND, ASSIGN, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE, COMMA; // special symbols

terminal String ID;
terminal String ERROR_TOKEN;
terminal Integer NUM; 
terminal Boolean TRUTH;

non terminal DecList program, declaration_list;           // list of declarations
non terminal ExpList statement_list, args, arg_list;      // list of expressions
non terminal VarDecList params, param_list, local_declarations;   // list of variable declarations (function args and params)

non terminal VarDec var_declaration, param, common_var_dec, simple_var_dec, array_var_dec;
non terminal Dec declaration, fun_declaration, fun_prototype;                                // generic 
non terminal Exp expression, statement;                                                      // generic expressions
non terminal Exp compound_stmt, expression_stmt, selection_stmt, iteration_stmt, call, return_stmt;  // statements

non terminal VarExp var;
non terminal NameTy type_specifier;                 // NameTy

precedence left BOOL;
precedence left INT;
precedence left VOID;

precedence right ELSE;

precedence left LBRACE;
precedence right RBRACE;

precedence left SEMI;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc LTE, LT, GT, GTE, EQ, NEQ;
precedence left ADD, SUB;
precedence left MULT, DIV;
precedence right UMINUS;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

program              ::= declaration_list:d
                        {: RESULT = d; :}
                        ;

declaration_list     ::= declaration_list:d1 declaration:d2
                        {: DecList l = d1;
                           Dec l2 = d2;
                           while (l.tail != null)
                              l = l.tail;
                           if (l2 != null)
                              l.tail = new DecList(d2, null); 
                           RESULT = d1;
                        :}
                        | declaration:d
                        {: 
                           RESULT = new DecList(d, null); 
                        :}
                        | error:e
                        {: 
                           // case: empty file
                           parser.report_error("expected Declaration", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new DecList(null, null); :}
                        ;

declaration          ::= var_declaration:v
                        {: RESULT = v; :}
                        | fun_declaration:f
                        {: RESULT = f; :}
                        | fun_prototype:f
                        {: RESULT = f; :}
                        ;

var_declaration      ::= common_var_dec:c SEMI
                        {: RESULT = c; :}
                        | common_var_dec:c
                        {: 
                           parser.report_error("expected ;", new Symbol(sym.NUM, c.row, c.column));
                           RESULT = c; 
                        :}
                        | error:e SEMI
                        {: 
                           parser.report_error("expected valid var declaration", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new SimpleDec(eleft, eright, new NameTy(eleft, eright, NameTy.VOID), "bad variable");
                        :}
                        ;

common_var_dec       ::= simple_var_dec:s
                        {: RESULT = s; :}
                        | array_var_dec:a
                        {: RESULT = a; :}
                        ;

simple_var_dec       ::= type_specifier:t ID:i
                        {: RESULT = new SimpleDec(t.row, t.column, t, i); :}
                        | type_specifier:t ERROR_TOKEN:e
                        {: 
                           parser.report_error("Invalid identifier", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new SimpleDec(t.row, t.column, t, e); 
                        :}
                        ;
array_var_dec        ::= type_specifier:t ID:i LBRACKET NUM:n RBRACKET
                        {: 
                           if (n < 1){
                              parser.report_error("invalid array size:   < 1", new Symbol(sym.NUM, tleft, tright));
                           }
                           RESULT = new ArrayDec(t.row, t.column, t, i, n); 
                        :}
                        | type_specifier:t ID:i LBRACKET NUM:n
                        {: 
                           parser.report_error("expected ]", new Symbol(sym.NUM, nleft, nright));
                           RESULT = new ArrayDec(t.row, t.column, t, i, n); 
                        :}
                        | type_specifier:t ERROR_TOKEN:e LBRACKET NUM:n RBRACKET
                        {: 
                           parser.report_error("Invalid identifier", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new SimpleDec(t.row, t.column, t, e); 
                        :}
                        ;

type_specifier       ::= BOOL:b
                        {: RESULT = new NameTy(bleft, bright, NameTy.BOOL); :}
                        | INT:i
                        {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
                        | VOID:v
                        {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
                        ;

fun_declaration      ::= type_specifier:t ID:i LPAREN params:p RPAREN compound_stmt:c
                        {: RESULT = new FunctionDec(t.row, t.column, t, i, p, c); :}
                        | type_specifier:t ERROR_TOKEN:e LPAREN params:p RPAREN compound_stmt:c
                        {: 
                           parser.report_error("Invalid identifier", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new FunctionDec(t.row, t.column, t, e, p, c); 
                        :}
                        | ERROR_TOKEN:t ID:i LPAREN params:p RPAREN compound_stmt:c
                        {: 
                           parser.report_error("invalid function return type", new Symbol(sym.NUM, tleft, tright));
                           RESULT = new FunctionDec(tleft, tright, new NameTy(tleft, tright, NameTy.VOID), i, p, c); 
                        :}
                        ;

fun_prototype        ::= type_specifier:t ID:i LPAREN params:p RPAREN SEMI
                        {: RESULT = new FunctionDec(t.row, t.column, t, i, p, new NilExp(t.row, t.column)); :}
                        | type_specifier:t ERROR_TOKEN:e LPAREN params:p RPAREN SEMI
                        {: 
                           parser.report_error("Invalid identifier", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new FunctionDec(t.row, t.column, t, e, p, new NilExp(t.row, t.column));
                        :}
                        | type_specifier:t ID:i LPAREN params:p RPAREN:r 
                        {: 
                           parser.report_error("semicolon missing", new Symbol(sym.NUM, rleft, rright));
                           RESULT = new FunctionDec(t.row, t.column, t, i, p, new NilExp(t.row, t.column));
                        :}
                        | ERROR_TOKEN:t ID:i LPAREN params:p RPAREN:r SEMI
                        {: 
                           parser.report_error("invalid dataype", new Symbol(sym.NUM, tleft, tright));
                           RESULT = new FunctionDec(tleft, tright, new NameTy(tleft, tright, NameTy.VOID), i, p, new NilExp(tleft, tleft));
                        :}
                        ;

params               ::= param_list:p
                        {: RESULT = p; :}
                        | VOID
                        {: RESULT = new VarDecList(null, null); :}
                        | error:e
                        {: 
                           // case: no params provided
                           parser.report_error("expected param_list or void", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new VarDecList(null, null); 
                        :}
                        ;

param_list           ::= param_list:pl COMMA param:p
                        {: VarDecList lisd = pl;
                           while (lisd.tail != null)
                              lisd = lisd.tail;
                           lisd.tail = new VarDecList(p, null);
                           RESULT = pl;
                        :}
                        | param:p
                        {: RESULT = new VarDecList(p, null); :}
                        | error:e param:p
                        {:
                           // Case: some provided
                           parser.report_error("expected , or )", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new VarDecList(p, null);
                        :}
                        ;

param                ::= simple_var_dec:s
                        {: RESULT = s; :}
                        | type_specifier:t ID:i LBRACKET RBRACKET
                        {: RESULT = new ArrayDec(t.row, t.column, t, i, 0); :}
                        | type_specifier:t ID:i LBRACKET:l
                        {: 
                           parser.report_error("expected ]", new Symbol(sym.LBRACKET, lleft, lright));
                           RESULT = new ArrayDec(t.row, t.column, t, i, 0); 
                        :}
                        | type_specifier:t ID:i LBRACKET NUM:n RBRACKET
                        {: 
                           parser.report_error("expected [], got [num]", new Symbol(sym.NUM, nleft, nright));
                           RESULT = new ArrayDec(t.row, t.column, t, i, 0); 
                        :}
                        | type_specifier:t ERROR_TOKEN:e LBRACKET RBRACKET
                        {: 
                           parser.report_error("Invalid identifier", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new ArrayDec(t.row, t.column, t, e, 0); 
                        :}
                        ;

compound_stmt        ::= LBRACE:lb local_declarations:l statement_list:s RBRACE
                        {: RESULT = new CompoundExp(lbleft, lbright, l, s); :}
                        ;

local_declarations   ::= local_declarations:l var_declaration:v
                        {: VarDecList list = l;
                           if (list.head == null){
                              list.head = v;
                           } else {
                              while (list.tail != null) 
                                 list = list.tail;
                              list.tail = new VarDecList(v, null);
                           }
                           RESULT = l;
                        :}
                        |
                        {: RESULT = new VarDecList(null, null); :}
                        ;

statement_list       ::= statement_list:l statement:s 
                        {: ExpList list = l;
                           if (list.head == null){
                              list.head = s;
                           } else {
                              while (list.tail != null) 
                                 list = list.tail;
                              list.tail = new ExpList(s, null);
                           }
                           RESULT = l;
                        :}
                        |
                        {: RESULT = new ExpList(null, null); :}
                        | statement_list:l var_declaration:v
                        {: 
                           parser.report_error("cannot put variable declarations after expression statements", new Symbol(sym.NUM, v.row, v.column));                         
                           RESULT = l; 
                        :}
                        ;

statement            ::= expression_stmt:e
                        {: RESULT = e; :}
                        | compound_stmt:c
                        {: RESULT = c; :}
                        | selection_stmt:s
                        {: RESULT = s; :}
                        | iteration_stmt:i
                        {: RESULT = i; :}
                        | return_stmt:r
                        {: RESULT = r; :}
                        ;

expression_stmt      ::= expression:e SEMI
                        {: RESULT = e; :}
                        | SEMI:s
                        {: RESULT = new NilExp(sleft, sright); :}
                        | error:e
                        {: 
                           parser.report_error("bad expression statement", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new NilExp(eleft, eright); 
                        :}
                        ;

selection_stmt       ::= IF:i LPAREN expression:e RPAREN statement:s ELSE statement:s2
                        {: RESULT = new IfExp(ileft, iright, e, s, s2); :}
                        | IF:i LPAREN expression:e RPAREN statement:s
                        {: RESULT = new IfExp(ileft, iright, e, s, new NilExp(ileft, iright)); :}
                        | IF:i LPAREN error:e RPAREN statement:s
                        {: 
                           parser.report_error("bad condition expression", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new IfExp(ileft, iright, new NilExp(ileft, iright), s, new NilExp(ileft, iright)); 
                        :}
                        ;

iteration_stmt       ::= WHILE:w LPAREN expression:e RPAREN statement:s
                        {: RESULT = new WhileExp(wleft, wright, e, s); :}
                        | WHILE:w LPAREN error:e RPAREN statement:s
                        {: 
                           parser.report_error("bad test condition for the loop", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new WhileExp(wleft, wright, new NilExp(eleft, eright), s); 
                        :}
                        ;

return_stmt          ::= RETURN:r expression:e SEMI 
                        {: RESULT = new ReturnExp(rleft, rright, e); :}
                        | RETURN:r SEMI
                        {: RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright)); :}
                        | RETURN:r error:e SEMI
                        {: 
                           parser.report_error("bad return statement", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright)); 
                        :}
                        ;

var                  ::= ID:i
                        {: RESULT = new VarExp(ileft, iright, new SimpleVar(ileft, iright, i)); :}
                        | ID:i LBRACKET expression:e RBRACKET
                        {: RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, e)); :}
                        | ID:i LBRACKET RBRACKET:r
                        {: 
                           parser.syntax_error(new Symbol(sym.error, rleft, rright));
                           parser.report_error("expected index", new Symbol(sym.NUM, rleft, rright));
                           RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, new NilExp(rleft, rright)));
                        :}
                        | ERROR_TOKEN:e
                        {: 
                           parser.report_error("Invalid identifier", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new VarExp(eleft, eright, new SimpleVar(eleft, eright, e)); 
                        :}
                        | ERROR_TOKEN:err LBRACKET expression:e RBRACKET
                        {: 
                           parser.report_error("Invalid identifier", new Symbol(sym.NUM, errleft, errright));
                           RESULT = new VarExp(eleft, eright, new IndexVar(errleft, errright, err, e)); 
                        :}
                        ;


expression           ::= var:v ASSIGN expression:e
                        {: RESULT = new AssignExp(v.row, v.column, v, e); :}
                        | expression:e1 OR expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.OR, e2); :}
                        | expression:e1 AND expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.AND, e2); :}
                        | NOT:n expression:e2
                        {: RESULT = new OpExp(nleft, nright, new NilExp(nleft, nright), OpExp.NOT, e2); :}
                        | expression:e1 LTE expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LTE, e2); :}
                        | expression:e1 LT expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LT, e2); :}
                        | expression:e1 GT expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GT, e2); :}
                        | expression:e1 GTE expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GTE, e2); :}
                        | expression:e1 EQ expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.EQ, e2); :}
                        | expression:e1 NEQ expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.NEQ, e2); :}
                        | expression:e1 ADD expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.PLUS, e2); :}
                        | expression:e1 SUB expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MINUS, e2); :}
                        | expression:e1 MULT expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.TIMES, e2); :}
                        | expression:e1 DIV expression:e2
                        {: RESULT = new OpExp(e1left, e1right, e1, OpExp.DIV, e2); :}
                        | SUB:m expression:e2
                        {: RESULT = new OpExp(mleft, mright, new NilExp(mleft, mright), OpExp.UMINUS, e2); :}
                        %prec UMINUS
                        | LPAREN expression:e1 RPAREN
                        {: RESULT = e1; :}
                        | var:v
                        {: RESULT = v; :}
                        | call:c
                        {: RESULT = c; :}
                        | NUM:n
                        {: RESULT = new IntExp(nleft, nright, n); :}
                        | TRUTH:t
                        {: RESULT = new BoolExp(tleft, tright, t); :}
                        ;

call                 ::= ID:i LPAREN:l args:a RPAREN
                        {: if (a.head instanceof NilExp){
                              a.head.row = lleft;
                              a.head.column = lright;
                        } 
                           RESULT = new CallExp(ileft, iright, i, a); 
                        :}
                        | ERROR_TOKEN:e LPAREN:l args:a RPAREN
                        {: 
                           parser.report_error("bad functioname", new Symbol(sym.NUM, eleft, eright));
                           if (a.head instanceof NilExp){
                              a.head.row = lleft;
                              a.head.column = lright;
                           } 
                           RESULT = new CallExp(eleft, eright, e, a); 
                        :}
                        ;

args                 ::= arg_list:a
                        {: RESULT = a; :}
                        | 
                        {: RESULT = new ExpList(null, null); :}
                        | error:e
                        {:
                           parser.report_error("Bad arg list", new Symbol(sym.NUM, eleft, eright));
                           RESULT = new ExpList(null, null); 
                        :}
                        ;

arg_list             ::= arg_list:a COMMA expression:e
                        {: ExpList list = a;
                           while (list.tail != null)
                              list = list.tail;
                           list.tail = new ExpList(e, null);
                           RESULT = a;
                        :}
                        | expression:e
                        {: RESULT = new ExpList(e, null); :}
                        | arg_list:a error:e
                        {: 
                           parser.report_error("invalid expression", new Symbol(sym.NUM, eleft, eright));
                           RESULT = a; 
                        :}

                        ;